From 378d4c2fbd1babfcfa29255353300743f6f2ba43 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Thu, 4 Jul 2013 23:33:14 +0200
Subject: wined3d: Replace the linked lists with a ringbuffer

---
 dlls/wined3d/cs.c              | 365 +++++++++++++++++------------------------
 dlls/wined3d/wined3d_private.h |  20 +--
 2 files changed, 162 insertions(+), 223 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 03f7916..229be26 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -22,20 +22,10 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(d3d);
 
-#define WINED3D_INITIAL_CS_SIZE 4096
-
-static CRITICAL_SECTION wined3d_cs_list_mutex;
-static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
-{
-    0, 0, &wined3d_cs_list_mutex,
-    {&wined3d_cs_list_mutex_debug.ProcessLocksList,
-    &wined3d_cs_list_mutex_debug.ProcessLocksList},
-    0, 0, {(DWORD_PTR)(__FILE__ ": wined3d_cs_list_mutex")}
-};
-static CRITICAL_SECTION wined3d_cs_list_mutex = {&wined3d_cs_list_mutex_debug, -1, 0, 0, 0, 0};
-
 enum wined3d_cs_op
 {
+    WINED3D_CS_OP_NOP,
+    WINED3D_CS_OP_SKIP,
     WINED3D_CS_OP_FENCE,
     WINED3D_CS_OP_PRESENT,
     WINED3D_CS_OP_CLEAR,
@@ -392,99 +382,30 @@ struct wined3d_cs_texture_unmap
     unsigned int sub_resource_idx;
 };
 
-/* FIXME: The list synchronization probably isn't particularly fast. */
-static void wined3d_cs_list_enqueue(struct wined3d_cs_list *list, struct wined3d_cs_block *block)
-{
-    EnterCriticalSection(&wined3d_cs_list_mutex);
-    list_add_tail(&list->blocks, &block->entry);
-    LeaveCriticalSection(&wined3d_cs_list_mutex);
-}
-
-static struct wined3d_cs_block *wined3d_cs_list_dequeue(struct wined3d_cs_list *list)
-{
-    struct list *head;
-
-    EnterCriticalSection(&wined3d_cs_list_mutex);
-    if (!(head = list_head(&list->blocks)))
-    {
-        LeaveCriticalSection(&wined3d_cs_list_mutex);
-        return NULL;
-    }
-    list_remove(head);
-    LeaveCriticalSection(&wined3d_cs_list_mutex);
-
-    return LIST_ENTRY(head, struct wined3d_cs_block, entry);
-}
-
-static struct wined3d_cs_block *wined3d_cs_list_dequeue_blocking(struct wined3d_cs_list *list)
-{
-    struct wined3d_cs_block *block;
-
-    /* FIXME: Use an event to wait after a couple of spins. */
-    for (;;)
-    {
-        if ((block = wined3d_cs_list_dequeue(list)))
-            return block;
-    }
-}
-
-static void wined3d_cs_list_init(struct wined3d_cs_list *list)
-{
-    list_init(&list->blocks);
-}
-
-static struct wined3d_cs_block *wined3d_cs_get_thread_block(const struct wined3d_cs *cs)
-{
-    return TlsGetValue(cs->tls_idx);
-}
-
-static void wined3d_cs_set_thread_block(const struct wined3d_cs *cs, struct wined3d_cs_block *block)
+struct wined3d_cs_skip
 {
-    if (!TlsSetValue(cs->tls_idx, block))
-        ERR("Failed to set thread block.\n");
-}
+    enum wined3d_cs_op opcode;
+    DWORD size;
+};
 
-static void wined3d_cs_flush(struct wined3d_cs *cs)
+static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
 {
-    wined3d_cs_list_enqueue(&cs->exec_list, wined3d_cs_get_thread_block(cs));
-    wined3d_cs_set_thread_block(cs, NULL);
+    LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
+    /* There is only one thread writing to queue.head, InterlockedExchange
+     * is used for the memory barrier. */
+    InterlockedExchange(&cs->queue.head, new_val);
 }
 
-static struct wined3d_cs_block *wined3d_cs_get_block(struct wined3d_cs *cs)
+static UINT wined3d_cs_exec_nop(struct wined3d_cs *cs, const void *data)
 {
-    struct wined3d_cs_block *block;
-
-    if (!(block = wined3d_cs_list_dequeue(&cs->free_list)))
-    {
-        if (!(block = HeapAlloc(GetProcessHeap(), 0, sizeof(*block))))
-        {
-            ERR("Failed to get new block.\n");
-            return NULL;
-        }
-    }
-
-    block->pos = 0;
-
-    return block;
+    return sizeof(enum wined3d_cs_op);
 }
 
-static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
+static UINT wined3d_cs_exec_skip(struct wined3d_cs *cs, const void *data)
 {
-    struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
-    void *data;
-
-    if (!block || block->pos + size > sizeof(block->data))
-    {
-        if (block)
-            wined3d_cs_flush(cs);
-        block = wined3d_cs_get_block(cs);
-        wined3d_cs_set_thread_block(cs, block);
-    }
+    const struct wined3d_cs_skip *op = data;
 
-    data = &block->data[block->pos];
-    block->pos += size;
-
-    return data;
+    return op->size;
 }
 
 static UINT wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
@@ -505,14 +426,14 @@ static void wined3d_cs_emit_fence(struct wined3d_cs *cs, BOOL *signalled)
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_FENCE;
     op->signalled = signalled;
+    cs->ops->submit(cs, sizeof(*op));
 }
 
-static void wined3d_cs_flush_and_wait(struct wined3d_cs *cs)
+static void wined3d_cs_finish(struct wined3d_cs *cs)
 {
     BOOL fence;
 
     wined3d_cs_emit_fence(cs, &fence);
-    wined3d_cs_flush(cs);
 
     /* A busy wait should be fine, we're not supposed to have to wait very
      * long. */
@@ -565,7 +486,7 @@ void wined3d_cs_emit_present(struct wined3d_cs *cs, struct wined3d_swapchain *sw
 
     pending = InterlockedIncrement(&cs->pending_presents);
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 
     while (pending > 1)
         pending = InterlockedCompareExchange(&cs->pending_presents, 0, 0);
@@ -607,8 +528,8 @@ void wined3d_cs_emit_clear(struct wined3d_cs *cs, DWORD rect_count, const RECT *
     const struct wined3d_state *state = &cs->device->state;
     struct wined3d_cs_clear *op;
     unsigned int i;
-
-    op = cs->ops->require_space(cs, FIELD_OFFSET(struct wined3d_cs_clear, rects[rect_count]));
+    size_t size = FIELD_OFFSET(struct wined3d_cs_clear, rects[rect_count]);
+    op = cs->ops->require_space(cs, size);
     op->opcode = WINED3D_CS_OP_CLEAR;
     op->flags = flags;
     op->color = *color;
@@ -628,7 +549,7 @@ void wined3d_cs_emit_clear(struct wined3d_cs *cs, DWORD rect_count, const RECT *
     if (flags & (WINED3DCLEAR_ZBUFFER | WINED3DCLEAR_STENCIL))
         wined3d_resource_acquire(state->fb.depth_stencil->resource);
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, size);
 }
 
 static UINT wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
@@ -769,7 +690,7 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, int base_vertex_idx, unsigned i
         }
     }
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_predication(struct wined3d_cs *cs, const void *data)
@@ -791,7 +712,7 @@ void wined3d_cs_emit_set_predication(struct wined3d_cs *cs, struct wined3d_query
     op->predicate = predicate;
     op->value = value;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_viewport(struct wined3d_cs *cs, const void *data)
@@ -812,7 +733,7 @@ void wined3d_cs_emit_set_viewport(struct wined3d_cs *cs, const struct wined3d_vi
     op->opcode = WINED3D_CS_OP_SET_VIEWPORT;
     op->viewport = *viewport;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_scissor_rect(struct wined3d_cs *cs, const void *data)
@@ -833,7 +754,7 @@ void wined3d_cs_emit_set_scissor_rect(struct wined3d_cs *cs, const RECT *rect)
     op->opcode = WINED3D_CS_OP_SET_SCISSOR_RECT;
     op->rect = *rect;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_rendertarget_view(struct wined3d_cs *cs, const void *data)
@@ -856,7 +777,7 @@ void wined3d_cs_emit_set_rendertarget_view(struct wined3d_cs *cs, unsigned int v
     op->view_idx = view_idx;
     op->view = view;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_depth_stencil_view(struct wined3d_cs *cs, const void *data)
@@ -910,7 +831,7 @@ void wined3d_cs_emit_set_depth_stencil_view(struct wined3d_cs *cs, struct wined3
     op->opcode = WINED3D_CS_OP_SET_DEPTH_STENCIL_VIEW;
     op->view = view;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_vertex_declaration(struct wined3d_cs *cs, const void *data)
@@ -931,7 +852,7 @@ void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs, struct wined3
     op->opcode = WINED3D_CS_OP_SET_VERTEX_DECLARATION;
     op->declaration = declaration;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_stream_source(struct wined3d_cs *cs, const void *data)
@@ -968,7 +889,7 @@ void wined3d_cs_emit_set_stream_source(struct wined3d_cs *cs, UINT stream_idx,
     op->offset = offset;
     op->stride = stride;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_stream_source_freq(struct wined3d_cs *cs, const void *data)
@@ -995,7 +916,7 @@ void wined3d_cs_emit_set_stream_source_freq(struct wined3d_cs *cs, UINT stream_i
     op->frequency = frequency;
     op->flags = flags;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_stream_output(struct wined3d_cs *cs, const void *data)
@@ -1028,7 +949,7 @@ void wined3d_cs_emit_set_stream_output(struct wined3d_cs *cs, UINT stream_idx,
     op->buffer = buffer;
     op->offset = offset;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_index_buffer(struct wined3d_cs *cs, const void *data)
@@ -1062,7 +983,7 @@ void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buff
     op->format_id = format_id;
     op->offset = offset;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const void *data)
@@ -1093,7 +1014,7 @@ void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_sha
     op->cb_idx = cb_idx;
     op->buffer = buffer;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_texture(struct wined3d_cs *cs, const void *data)
@@ -1185,7 +1106,7 @@ void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined
     op->opcode = WINED3D_CS_OP_SET_TEXTURE;
     op->stage = stage;
     op->texture = texture;
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_shader_resource_view(struct wined3d_cs *cs, const void *data)
@@ -1209,7 +1130,7 @@ void wined3d_cs_emit_set_shader_resource_view(struct wined3d_cs *cs, enum wined3
     op->view_idx = view_idx;
     op->view = view;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_sampler(struct wined3d_cs *cs, const void *data)
@@ -1233,7 +1154,7 @@ void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, enum wined3d_shader_type
     op->sampler_idx = sampler_idx;
     op->sampler = sampler;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_shader(struct wined3d_cs *cs, const void *data)
@@ -1256,7 +1177,7 @@ void wined3d_cs_emit_set_shader(struct wined3d_cs *cs, enum wined3d_shader_type
     op->type = type;
     op->shader = shader;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_vs_consts_f(struct wined3d_cs *cs, const void *data)
@@ -1289,8 +1210,9 @@ void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, unsigned int start_idx,
         const struct wined3d_vec4 *constants, enum wined3d_shader_type type)
 {
     struct wined3d_cs_set_consts_f *op;
+    size_t size = sizeof(*op) + sizeof(op->constants[0]) * (count - 1);
 
-    op = cs->ops->require_space(cs, sizeof(*op) + sizeof(op->constants[0]) * (count - 1));
+    op = cs->ops->require_space(cs, size);
     switch (type)
     {
         case WINED3D_SHADER_TYPE_PIXEL:
@@ -1315,7 +1237,7 @@ void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, unsigned int start_idx,
     op->count = count;
     memcpy(op->constants, constants, sizeof(op->constants[0]) * count);
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, size);
 }
 
 static UINT wined3d_cs_exec_set_render_state(struct wined3d_cs *cs, const void *data)
@@ -1337,8 +1259,8 @@ void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render
     op->state = state;
     op->value = value;
 
-    cs->ops->submit(cs);
-};
+    cs->ops->submit(cs, sizeof(*op));
+}
 
 static UINT wined3d_cs_exec_set_vs_consts_b(struct wined3d_cs *cs, const void *data)
 {
@@ -1368,8 +1290,9 @@ void wined3d_cs_emit_set_consts_b(struct wined3d_cs *cs, unsigned int start_idx,
         unsigned int count, const BOOL *constants, enum wined3d_shader_type type)
 {
     struct wined3d_cs_set_consts_b *op;
+    size_t size = sizeof(*op) + sizeof(op->constants[0]) * (count - 1);
 
-    op = cs->ops->require_space(cs, sizeof(*op) + sizeof(op->constants[0]) * (count - 1));
+    op = cs->ops->require_space(cs, size);
     switch (type)
     {
         case WINED3D_SHADER_TYPE_PIXEL:
@@ -1394,7 +1317,7 @@ void wined3d_cs_emit_set_consts_b(struct wined3d_cs *cs, unsigned int start_idx,
     op->count = count;
     memcpy(op->constants, constants, sizeof(op->constants[0]) * count);
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, size);
 }
 
 static UINT wined3d_cs_exec_set_vs_consts_i(struct wined3d_cs *cs, const void *data)
@@ -1425,8 +1348,9 @@ void wined3d_cs_emit_set_consts_i(struct wined3d_cs *cs, unsigned int start_idx,
         const struct wined3d_ivec4 *constants, enum wined3d_shader_type type)
 {
     struct wined3d_cs_set_consts_i *op;
+    size_t size = sizeof(*op) + sizeof(op->constants[0]) * (count - 1);
 
-    op = cs->ops->require_space(cs, sizeof(*op) + sizeof(op->constants[0]) * (count - 1));
+    op = cs->ops->require_space(cs, size);
     switch (type)
     {
         case WINED3D_SHADER_TYPE_PIXEL:
@@ -1451,7 +1375,7 @@ void wined3d_cs_emit_set_consts_i(struct wined3d_cs *cs, unsigned int start_idx,
     op->count = count;
     memcpy(op->constants, constants, sizeof(op->constants[0]) * count);
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, size);
 }
 
 static UINT wined3d_cs_exec_set_texture_state(struct wined3d_cs *cs, const void *data)
@@ -1475,7 +1399,7 @@ void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
     op->state = state;
     op->value = value;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_sampler_state(struct wined3d_cs *cs, const void *data)
@@ -1499,7 +1423,7 @@ void wined3d_cs_emit_set_sampler_state(struct wined3d_cs *cs, UINT sampler_idx,
     op->state = state;
     op->value = value;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_transform(struct wined3d_cs *cs, const void *data)
@@ -1523,7 +1447,7 @@ void wined3d_cs_emit_set_transform(struct wined3d_cs *cs, enum wined3d_transform
     op->state = state;
     op->matrix = *matrix;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_clip_plane(struct wined3d_cs *cs, const void *data)
@@ -1545,7 +1469,7 @@ void wined3d_cs_emit_set_clip_plane(struct wined3d_cs *cs, UINT plane_idx, const
     op->plane_idx = plane_idx;
     op->plane = *plane;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_color_key(struct wined3d_cs *cs, const void *data)
@@ -1630,7 +1554,7 @@ void wined3d_cs_emit_set_color_key(struct wined3d_cs *cs, struct wined3d_texture
     else
         op->set = 0;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_material(struct wined3d_cs *cs, const void *data)
@@ -1651,7 +1575,7 @@ void wined3d_cs_emit_set_material(struct wined3d_cs *cs, const struct wined3d_ma
     op->opcode = WINED3D_CS_OP_SET_MATERIAL;
     op->material = *material;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_reset_state(struct wined3d_cs *cs, const void *data)
@@ -1675,7 +1599,7 @@ void wined3d_cs_emit_reset_state(struct wined3d_cs *cs)
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_RESET_STATE;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_destroy_object(struct wined3d_cs *cs, const void *data)
@@ -1696,7 +1620,7 @@ void wined3d_cs_emit_destroy_object(struct wined3d_cs *cs, void (*callback)(void
     op->callback = callback;
     op->object = object;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_glfinish(struct wined3d_cs *cs, const void *data)
@@ -1722,7 +1646,7 @@ void wined3d_cs_emit_glfinish(struct wined3d_cs *cs)
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_GLFINISH;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_base_vertex_index(struct wined3d_cs *cs, const void *data)
@@ -1744,7 +1668,7 @@ void wined3d_cs_emit_set_base_vertex_index(struct wined3d_cs *cs,
     op->opcode = WINED3D_CS_OP_SET_BASE_VERTEX_INDEX;
     op->base_vertex_index = base_vertex_index;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_primitive_type(struct wined3d_cs *cs, const void *data)
@@ -1770,7 +1694,7 @@ void wined3d_cs_emit_set_primitive_type(struct wined3d_cs *cs, GLenum primitive_
     op->opcode = WINED3D_CS_OP_SET_PRIMITIVE_TYPE;
     op->gl_primitive_type = primitive_type;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_light(struct wined3d_cs *cs, const void *data)
@@ -1827,7 +1751,7 @@ void wined3d_cs_emit_set_light(struct wined3d_cs *cs, const struct wined3d_light
     op->opcode = WINED3D_CS_OP_SET_LIGHT;
     op->light = *light;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_set_light_enable(struct wined3d_cs *cs, const void *data)
@@ -1916,7 +1840,7 @@ void wined3d_cs_emit_set_light_enable(struct wined3d_cs *cs, UINT idx, BOOL enab
     op->idx = idx;
     op->enable = enable;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_blt(struct wined3d_cs *cs, const void *data)
@@ -1948,7 +1872,7 @@ void wined3d_cs_emit_blt(struct wined3d_cs *cs, struct wined3d_surface *dst_surf
     if (fx)
         op->fx = *fx;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_clear_rtv(struct wined3d_cs *cs, const void *data)
@@ -1981,7 +1905,7 @@ void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarge
     op->stencil = stencil;
     op->blitter = blitter;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_texture_map(struct wined3d_cs *cs, const void *data)
@@ -2006,12 +1930,14 @@ void *wined3d_cs_emit_texture_map(struct wined3d_cs *cs, struct wined3d_texture
     op->flags = flags;
     op->mem = &ret;
 
-    cs->ops->finish(cs);
+    cs->ops->submit(cs, sizeof(*op));
 
     if (flags & (WINED3D_MAP_NOOVERWRITE | WINED3D_MAP_DISCARD))
     {
         FIXME("Dynamic resource map is inefficient\n");
     }
+    cs->ops->finish(cs);
+
     return ret;
 }
 
@@ -2034,11 +1960,13 @@ void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture
     op->texture = texture;
     op->sub_resource_idx = sub_resource_idx;
 
-    cs->ops->submit(cs);
+    cs->ops->submit(cs, sizeof(*op));
 }
 
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
+    /* WINED3D_CS_OP_NOP                        */ wined3d_cs_exec_nop,
+    /* WINED3D_CS_OP_SKIP                       */ wined3d_cs_exec_skip,
     /* WINED3D_CS_OP_FENCE                      */ wined3d_cs_exec_fence,
     /* WINED3D_CS_OP_PRESENT                    */ wined3d_cs_exec_present,
     /* WINED3D_CS_OP_CLEAR                      */ wined3d_cs_exec_clear,
@@ -2084,42 +2012,59 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_TEXTURE_UNMAP              */ wined3d_cs_exec_texture_unmap,
 };
 
-static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
+static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
 {
-    if (size > cs->data_size)
+    struct wined3d_cs_queue *queue = &cs->queue;
+    size_t queue_size = sizeof(queue->data) / sizeof(*queue->data);
+
+    if (queue_size - size < queue->head)
     {
-        void *new_data;
+        struct wined3d_cs_skip *skip;
+        size_t nop_size = queue_size - queue->head;
 
-        size = max( size, cs->data_size * 2 );
-        if (!(new_data = HeapReAlloc(GetProcessHeap(), 0, cs->data, size)))
-            return NULL;
+        skip = wined3d_cs_mt_require_space(cs, nop_size);
+        if (nop_size < sizeof(*skip))
+        {
+            skip->opcode = WINED3D_CS_OP_NOP;
+        }
+        else
+        {
+            skip->opcode = WINED3D_CS_OP_SKIP;
+            skip->size = nop_size;
+        }
 
-        cs->data_size = size;
-        cs->data = new_data;
+        cs->ops->submit(cs, nop_size);
+        assert(!queue->head);
     }
 
-    return cs->data;
-}
+    while(1)
+    {
+        LONG head = queue->head;
+        LONG tail = *((volatile LONG *)&queue->tail);
+        LONG new_pos;
+        /* Empty */
+        if (head == tail)
+            break;
+        /* Head ahead of tail, take care of wrap-around */
+        new_pos = (head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
+        if (head > tail && (new_pos || tail))
+            break;
+        /* Tail ahead of head, but still enough space */
+        if (new_pos < tail && new_pos)
+            break;
 
-static void wined3d_cs_st_submit(struct wined3d_cs *cs)
-{
-    enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)cs->data;
+        TRACE("Waiting for free space. Head %u, tail %u, want %u\n", head, tail,
+                (unsigned int) size);
+    }
 
-    wined3d_cs_op_handlers[opcode](cs, cs->data);
+    return &queue->data[queue->head];
 }
 
-static const struct wined3d_cs_ops wined3d_cs_st_ops =
-{
-    wined3d_cs_st_require_space,
-    wined3d_cs_st_submit,
-    wined3d_cs_st_submit,
-};
-
 static const struct wined3d_cs_ops wined3d_cs_mt_ops =
 {
     wined3d_cs_mt_require_space,
-    wined3d_cs_flush,
-    wined3d_cs_flush_and_wait,
+    wined3d_cs_submit,
+    wined3d_cs_finish,
 };
 
 /* FIXME: wined3d_device_uninit_3d() should either flush and wait, or be an
@@ -2131,9 +2076,38 @@ static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
     op = wined3d_cs_mt_require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_STOP;
 
-    wined3d_cs_flush(cs);
+    wined3d_cs_submit(cs, sizeof(*op));
+}
+
+static void wined3d_cs_st_submit(struct wined3d_cs *cs, size_t size)
+{
+    enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&cs->queue.data;
+
+    if (opcode >= WINED3D_CS_OP_STOP)
+    {
+        ERR("Invalid opcode %#x.\n", opcode);
+        return;
+    }
+
+    wined3d_cs_op_handlers[opcode](cs, &cs->queue.data);
+}
+
+static void wined3d_cs_st_finish(struct wined3d_cs *cs)
+{
 }
 
+static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
+{
+    return cs->queue.data;
+}
+
+static const struct wined3d_cs_ops wined3d_cs_st_ops =
+{
+    wined3d_cs_st_require_space,
+    wined3d_cs_st_submit,
+    wined3d_cs_st_finish,
+};
+
 void wined3d_cs_switch_onscreen_ds(struct wined3d_cs *cs,
         struct wined3d_context *context, struct wined3d_surface *depth_stencil)
 {
@@ -2157,31 +2131,32 @@ void wined3d_cs_switch_onscreen_ds(struct wined3d_cs *cs,
 static DWORD WINAPI wined3d_cs_run(void *thread_param)
 {
     struct wined3d_cs *cs = thread_param;
+    enum wined3d_cs_op opcode;
+    LONG tail;
 
     TRACE("Started.\n");
 
     cs->thread_id = GetCurrentThreadId();
     for (;;)
     {
-        struct wined3d_cs_block *block;
-        UINT pos = 0;
-
-        block = wined3d_cs_list_dequeue_blocking(&cs->exec_list);
-        while (pos < block->pos)
+        if (*((volatile LONG *)&cs->queue.head) == cs->queue.tail)
         {
-            enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&block->data[pos];
+            continue;
+        }
 
-            if (opcode >= WINED3D_CS_OP_STOP)
-            {
-                if (opcode > WINED3D_CS_OP_STOP)
-                    ERR("Invalid opcode %#x.\n", opcode);
-                goto done;
-            }
+        tail = cs->queue.tail;
+        opcode = *(const enum wined3d_cs_op *)&cs->queue.data[tail];
 
-            pos += wined3d_cs_op_handlers[opcode](cs, &block->data[pos]);
+        if (opcode >= WINED3D_CS_OP_STOP)
+        {
+            if (opcode > WINED3D_CS_OP_STOP)
+                ERR("Invalid opcode %#x.\n", opcode);
+            goto done;
         }
 
-        wined3d_cs_list_enqueue(&cs->free_list, block);
+        tail += wined3d_cs_op_handlers[opcode](cs, &cs->queue.data[tail]);
+        tail &= (WINED3D_CS_QUEUE_SIZE - 1);
+        InterlockedExchange(&cs->queue.tail, tail);
     }
 
 done:
@@ -2206,25 +2181,10 @@ struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device)
     cs->ops = &wined3d_cs_st_ops;
     cs->device = device;
 
-    cs->data_size = WINED3D_INITIAL_CS_SIZE;
-    if (!(cs->data = HeapAlloc(GetProcessHeap(), 0, cs->data_size)))
-    {
-        goto err;
-    }
-
-    if ((cs->tls_idx = TlsAlloc()) == TLS_OUT_OF_INDEXES)
-    {
-        ERR("Failed to allocate cs TLS index, err %#x.\n", GetLastError());
-        goto err;
-    }
-
     if (wined3d_settings.cs_multithreaded)
     {
         cs->ops = &wined3d_cs_mt_ops;
 
-        wined3d_cs_list_init(&cs->free_list);
-        wined3d_cs_list_init(&cs->exec_list);
-
         if (!(cs->thread = CreateThread(NULL, 0, wined3d_cs_run, cs, 0, NULL)))
         {
             ERR("Failed to create wined3d command stream thread.\n");
@@ -2236,12 +2196,7 @@ struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device)
 
 err:
     if (cs)
-    {
         state_cleanup(&cs->state);
-        if (cs->tls_idx != TLS_OUT_OF_INDEXES && !TlsFree(cs->tls_idx))
-            ERR("Failed to free cs TLS index, err %#x.\n", GetLastError());
-        HeapFree(GetProcessHeap(), 0, cs->data);
-    }
     HeapFree(GetProcessHeap(), 0, cs);
     return NULL;
 }
@@ -2260,17 +2215,7 @@ void wined3d_cs_destroy(struct wined3d_cs *cs)
         CloseHandle(cs->thread);
         if (ret != WAIT_OBJECT_0)
             ERR("Wait failed (%#x).\n", ret);
-
-        /* FIXME: Cleanup the block lists on thread exit. */
-#if 0
-        wined3d_cs_list_cleanup(&cs->exec_list);
-        wined3d_cs_list_cleanup(&cs->free_list);
-#endif
     }
 
-    if (!TlsFree(cs->tls_idx))
-        ERR("Failed to free cs TLS index, err %#x.\n", GetLastError());
-
-    HeapFree(GetProcessHeap(), 0, cs->data);
     HeapFree(GetProcessHeap(), 0, cs);
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index f2f03c5..2f2c92e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -31,6 +31,7 @@
 #define WINE_GLAPI
 #endif
 
+#include <assert.h>
 #include <stdarg.h>
 #include <math.h>
 #include <limits.h>
@@ -2989,19 +2990,17 @@ struct wined3d_cs_list
     struct list blocks;
 };
 
-struct wined3d_cs_block
+#define WINED3D_CS_QUEUE_SIZE 0x100000
+struct wined3d_cs_queue
 {
-    struct list entry;
-    UINT pos;
-     /* FIXME? The size is somewhat arbitrary. It's big enough for huge
-      * shader constant set calls though */
-    BYTE data[sizeof(float) * 4 * 256 * 2];
+    LONG head, tail;
+    BYTE data[WINED3D_CS_QUEUE_SIZE];
 };
 
 struct wined3d_cs_ops
 {
     void *(*require_space)(struct wined3d_cs *cs, size_t size);
-    void (*submit)(struct wined3d_cs *cs);
+    void (*submit)(struct wined3d_cs *cs, size_t size);
     void (*finish)(struct wined3d_cs *cs);
 };
 
@@ -3012,14 +3011,9 @@ struct wined3d_cs
     struct wined3d_state state;
     HANDLE thread;
     DWORD thread_id;
-    DWORD tls_idx;
     struct wined3d_surface *onscreen_depth_stencil;
 
-    size_t data_size;
-    void *data;
-
-    struct wined3d_cs_list free_list;
-    struct wined3d_cs_list exec_list;
+    struct wined3d_cs_queue queue;
 
     LONG pending_presents;
 };
-- 
2.8.0

