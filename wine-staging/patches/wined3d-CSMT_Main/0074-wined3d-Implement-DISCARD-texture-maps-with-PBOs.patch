From 70af66f5937a43b642abf38920ef206a9348d45c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 27 Sep 2013 19:06:41 +0200
Subject: wined3d: Implement DISCARD texture maps with PBOs.

---
 dlls/wined3d/cs.c              |  6 ++++--
 dlls/wined3d/texture.c         | 46 +++++++++++++++++++++++++++++++++---------
 dlls/wined3d/wined3d_private.h |  4 ++--
 3 files changed, 43 insertions(+), 13 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 75dd990..d30c449 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -393,6 +393,7 @@ struct wined3d_cs_texture_changed
     enum wined3d_cs_op opcode;
     struct wined3d_texture *texture;
     unsigned int sub_resource_idx;
+    struct wined3d_gl_bo *swap_buffer;
 };
 
 struct wined3d_cs_skip
@@ -1951,13 +1952,13 @@ static UINT wined3d_cs_exec_texture_changed(struct wined3d_cs *cs, const void *d
 {
     const struct wined3d_cs_texture_changed *op = data;
 
-    wined3d_texture_changed(op->texture, op->sub_resource_idx);
+    wined3d_texture_changed(op->texture, op->sub_resource_idx, op->swap_buffer);
 
     return sizeof(*op);
 }
 
 void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        unsigned int sub_resource_idx)
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer)
 {
     struct wined3d_cs_texture_changed *op;
 
@@ -1965,6 +1966,7 @@ void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_textu
     op->opcode = WINED3D_CS_OP_TEXTURE_CHANGED;
     op->texture = texture;
     op->sub_resource_idx = sub_resource_idx;
+    op->swap_buffer = swap_buffer;
 
     cs->ops->submit(cs, sizeof(*op));
 }
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index ab7127b..43bcb51 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -1673,10 +1673,26 @@ void *wined3d_texture_map_internal(struct wined3d_texture *texture, unsigned int
 
     if (flags & WINED3D_MAP_DISCARD)
     {
+        /* MSDN says DISCARD on sub resource 0 discards the entire texture, whereas DISCARD on all other
+         * sub resources is ignored. Currently we can do it the MSDN way for sysmem, but not for buffers. */
+        if (sub_resource_idx != 0)
+            FIXME("Discard of sub resource %u.\n", sub_resource_idx);
+
+        switch(texture->resource.map_binding)
+        {
+            case WINED3D_LOCATION_BUFFER:
+                sub_resource->map_buffer = wined3d_device_get_bo(device, sub_resource->size,
+                        GL_STREAM_DRAW, GL_PIXEL_UNPACK_BUFFER, context);
+                ret = !!sub_resource->map_buffer;
+                break;
+
+            default:
+                ret = wined3d_texture_prepare_location(texture, sub_resource_idx,
+                        context, texture->resource.map_binding);
+        }
         TRACE("WINED3D_MAP_DISCARD flag passed, marking %s as up to date.\n",
                 wined3d_debug_location(texture->resource.map_binding));
-        if ((ret = wined3d_texture_prepare_location(texture, sub_resource_idx,
-                context, texture->resource.map_binding)))
+        if (ret)
             wined3d_texture_validate_location(texture, sub_resource_idx, texture->resource.map_binding);
     }
     else
@@ -1772,11 +1788,11 @@ static HRESULT texture_resource_sub_resource_map(struct wined3d_resource *resour
 
     flags = wined3d_resource_sanitize_map_flags(resource, flags);
 
-    if (flags & (WINED3D_MAP_NOOVERWRITE | WINED3D_MAP_DISCARD))
-    {
-        FIXME("Dynamic resource map is inefficient\n");
-    }
-    wined3d_resource_wait_idle(&texture->resource);
+    if (flags & WINED3D_MAP_NOOVERWRITE)
+        FIXME("WINED3D_MAP_NOOVERWRITE is not implemented yet.\n");
+
+    if (!(flags & WINED3D_MAP_DISCARD) || texture->resource.map_binding != WINED3D_LOCATION_BUFFER)
+        wined3d_resource_wait_idle(&texture->resource);
 
     base_memory = wined3d_cs_emit_texture_map(device->cs, texture, sub_resource_idx, flags);
 
@@ -1850,8 +1866,20 @@ void wined3d_texture_unmap_internal(struct wined3d_texture *texture, unsigned in
     }
 }
 
-void wined3d_texture_changed(struct wined3d_texture *texture, unsigned int sub_resource_idx)
+void wined3d_texture_changed(struct wined3d_texture *texture, unsigned int sub_resource_idx,
+        struct wined3d_gl_bo *swap_buffer)
 {
+    struct wined3d_texture_sub_resource *sub_resource = &texture->sub_resources[sub_resource_idx];
+
+    if (swap_buffer && swap_buffer != sub_resource->buffer)
+    {
+        struct wined3d_device *device = texture->resource.device;
+        struct wined3d_context *context = context_acquire(device, NULL);
+        wined3d_device_release_bo(device, sub_resource->buffer, context);
+        context_release(context);
+        sub_resource->buffer = swap_buffer;
+    }
+
     wined3d_texture_invalidate_location(texture, sub_resource_idx, ~texture->resource.map_binding);
 }
 
@@ -1879,7 +1907,7 @@ static HRESULT texture_resource_sub_resource_unmap(struct wined3d_resource *reso
 
     if (sub_resource->unmap_dirtify)
     {
-        wined3d_cs_emit_texture_changed(device->cs, texture, sub_resource_idx);
+        wined3d_cs_emit_texture_changed(device->cs, texture, sub_resource_idx, sub_resource->map_buffer);
         sub_resource->unmap_dirtify = FALSE;
     }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 4fd8892..e3b6ff8 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2733,7 +2733,7 @@ void wined3d_texture_bind(struct wined3d_texture *texture,
 void wined3d_texture_bind_and_dirtify(struct wined3d_texture *texture,
         struct wined3d_context *context, BOOL srgb) DECLSPEC_HIDDEN;
 void wined3d_texture_changed(struct wined3d_texture *texture,
-        unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer) DECLSPEC_HIDDEN;
 BOOL wined3d_texture_check_block_align(const struct wined3d_texture *texture,
         unsigned int level, const struct wined3d_box *box) DECLSPEC_HIDDEN;
 GLenum wined3d_texture_get_gl_buffer(const struct wined3d_texture *texture) DECLSPEC_HIDDEN;
@@ -3118,7 +3118,7 @@ void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarge
         const RECT *rect, DWORD flags, const struct wined3d_color *color, float depth, DWORD stencil,
         const struct blit_shader *blitter) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer) DECLSPEC_HIDDEN;
 void *wined3d_cs_emit_texture_map(struct wined3d_cs *cs, struct wined3d_texture *texture,
         unsigned int sub_resource_idx, DWORD flags) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture *texture,
-- 
2.8.0

